█░█░█░█░█░█░█░█░█░█░█░█░█░█░█░█░
# Rank of a matrix
Number of linearly independent columns of a matrix

> By doing Dimensionality reduction we incur some errors in the points as they dont exactly
lie on the line

Why dimentionality reduction?
-> Discove hidden correlations; latent dimenions hidden in the dataset
-> Reduce redundant or noisy features
-> interpretation and visualization
-> Easier storage and processing of data

Normally, abilities are
-> latent
-> hard to measure
-> time-dependent
-> place-dependent

yet, abilities are also
-> hard to transcend (revert-to-the-mean effect, RTTM)
-> relatively easy to perceive and project

Certainly. This set of definitions describes a framework for ranking players over time, potentially in multiple dimensions. Let's break it down:

1. Basic Definitions:
   - P: Set of players
   - |P| = n: There are n players
   - T: Set of time instants
   - r: P × T → ℝ: A function that assigns a real number rating to each player at each time instant

2. Ranking Function (ρ):
   - ρ: P × T → [1..n]: Assigns a rank (between 1 and n) to each player at each time
   - ρ(p,t) = k ↔ |{pj : r(pj,t) ≤ r(pi,t)}| = k
     This means: A player p at time t has rank k if and only if there are k players (including p) whose rating is less than or equal to p's rating at time t.

3. Distance Function (δ):
   - δ(pi,pj,t) = |r(pi,t) − r(pj,t)|
   - This measures the absolute difference in ratings between two players at a given time
   - It captures both similarity (small δ) and distance (large δ) between players' ratings

4. Multi-dimensional Ranking:
   - rmulti: P × T → ℝd: Assigns a d-dimensional real vector of ratings to each player at each time
   - Often, rmulti(pi,t) = f(r1(pi,t), ..., rd(pi,t))
     This means the multi-dimensional rating is often a function of individual ratings in each dimension

5. Pareto Dominance:
   - In multi-dimensional rankings, pi dominates pj at time t if:
     For every dimension x, rx(pi,t) ≥ rx(pj,t)
   - This means pi is at least as good as pj in all dimensions, and better in at least one

Applications and Implications:

1. Player Rankings: 
   This system can be used to rank players in games, sports, or any competitive scenario over time.

2. Dynamic Rankings: 
   The inclusion of time (T) allows for tracking how rankings change over time.

3. Multi-faceted Evaluation: 
   The multi-dimensional aspect allows for ranking based on multiple criteria simultaneously.

4. Comparative Analysis: 
   The δ function allows for quantifying how close or far apart players are in their ratings.

5. Non-linear Rankings: 
   The Pareto dominance concept allows for situations where there's no clear linear ordering of players.

6. Flexible Aggregation: 
   The function f in the multi-dimensional case allows for different ways of combining dimensional ratings.

7. Complex Decision Making: 
   This framework can be used in scenarios where decisions need to be made based on multiple, possibly conflicting criteria over time.

This framework is particularly useful in data science for:
- Analyzing player performance in esports or traditional sports
- Ranking products or services based on multiple features
- Evaluating employee performance across various metrics
- Assessing the evolution of entities (companies, countries, etc.) across multiple dimensions over time

Should we keep user ratings?
Yes 
-> Feeling of improvement 
-> Gauge for new features  
-> Better matchmaking 

No
-> Not necessary for casual viewers

█░█░█░█░█░█░█░█░█░█░█░█░█░█░█░█░
## Massey ranking
The Massey ranking system is based on solving a system of linear equations. The basic formula is:
Mr = p
Where:
M is the Massey matrix
r is the vector of team ratings
p is the vector of score differentials
To construct the Massey matrix M:

The diagonal element M[i,i] is the number of games played by team i
The off-diagonal element M[i,j] is the negative of the number of times team i played team j

The vector p is calculated as the sum of score differentials for each team.

█░█░█░█░█░█░█░█░█░█░█░█░█░█░█░█░
-> The Massey matrix M is constructed based on the number of games played between teams, not the goal differences. Here's how it's built:

Diagonal elements M[i,i]:

These represent the total number of games played by team i.
For each team, count how many games they've played in total.


Off-diagonal elements M[i,j]:

These represent the number of times team i played against team j, but as a negative value.
If team i played team j once, M[i,j] = -1
If they played twice, M[i,j] = -2, and so on.
If they didn't play at all, M[i,j] = 0

For a given __directed network__: 
-> Reciprocity is the probability of having links in both directions between two vertices.
<- R measures how the economies of two countries become interconnected (or interdependent).

r = L^<->/L

L <->: number of reciprocal links
L: total number of links.

█░█░█░█░█░█░█░█░█░█░█░█░█░█░█░█░
-> Reconstruction
C = Mcp · MTcp (m × m matrix, where m is the number of nodes)
   Represents node-node relationships
   Each entry Cij represents how nodes i and j are connected

P = MTcp · Mcp (n × n matrix, where n is the number of edges)
   Represents edge-edge relationships
   Each entry Pij represents how edges i and j are related in the network structure

      e1
    A --- B
e2  |     | e3
    C --- D
      e4

█░█░█░█░█░█░█░█░█░█░█░█░█░█░█░█░
-> Assortativity
Assortativity is a measure of the tendency for nodes in a network to connect 
with other nodes that are similar to them in some way.

-> Knn(d) = ∑(i:ki=d) Knn(i) / nd
This formula is related to the average nearest neighbor degree as a function of node degree, which is used to measure degree assortativity.

Where:
- Knn(d) is the average nearest neighbor degree of nodes with degree d
- ki is the degree of node i
- Knn(i) is the average nearest neighbor degree of node i
- nd is the number of nodes with degree d

Interpretation:
- If Knn(d) increases with d, the network is assortative
- If Knn(d) decreases with d, the network is disassortative
- If Knn(d) is constant, the network is neutral

Types of Assortativity:
a. Degree Assortativity: Nodes with similar degrees tend to connect.
b. Attribute Assortativity: Nodes with similar attributes (e.g., age, gender) tend to connect.

||| -> 
The assortativity coefficient r ranges from -1 (disassortative) to 1 (assortative), with 0 indicating no assortativity. <-
||| -> 

█░█░█░█░█░█░█░█░█░█░█░█░█░█░█░█░
-> Balassa's RCA is an index used in international economics to calculate the relative advantage or disadvantage 
of a country in a certain class of goods or services.

Formula:
RCA = (Xij / Xit) / (Xnj / Xnt)
Where:
Xij: Country i's exports of product j
Xit: Country i's total exports
Xnj: World exports of product j
Xnt: Total world exports

Interpretation:
RCA > 1: Country has a comparative advantage in that product
RCA < 1: Country has a comparative disadvantage in that product

-> Alternatively:
RCAcp = (Mcp / ∑p′ Mcp′) / (∑c′ Mc′p / ∑c′∑p′ Mc′p′)
This is indeed a matrix formulation of the Revealed Comparative Advantage.

Where:
- RCAcp is the RCA for country c in product p
- Mcp is the export value of product p by country c
- ∑p′ Mcp′ is the total exports of country c
- ∑c′ Mc′p is the world exports of product p
- ∑c′∑p′ Mc′p′ is the total world exports

This formula calculates the RCA for all country-product pairs simultaneously, which is more efficient for large datasets.

Interpretation:
- RCAcp > 1 indicates a comparative advantage
- RCAcp < 1 indicates a comparative disadvantage